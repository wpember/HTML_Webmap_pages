<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Display a map</title>
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
  <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.js"></script>
  <link href="https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.css" rel="stylesheet" />
  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v3.1.2/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v3.1.2/mapbox-gl-geocoder.css" type="text/css" />
  <style>
    <style type="text/css">
    body {
      margin: 0;
      padding: 0;
    }
    h2,
    h3 {
      margin: 10px;
      font-size: 1.2em;
    }
    h3 {
      font-size: 1em;
    }
    p {
      font-size: 0.85em;
      margin: 10px;
      text-align: left;
    }
    /**
    * Create a position for the map
    * on the page */
    #map {
      position: absolute;
      width: 100%;
      height: 100%
    }
    /**
    * Set rules for how the map overlays
    * (information box and legend) will be displayed
    * on the page. */
    .map-overlay {
      position: absolute;
      bottom: 0;
      right: 0;
      background: rgba(255, 255, 255, 0.8);
      margin-right: 20px;
      font-family: Arial, sans-serif;
      overflow: auto;
      border-radius: 3px;
    }
    #features {
      top: 0;
      height: 120px;
      margin-top: 20px;
      width: 250px;
    }
    #legend {
      padding: 10px;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      line-height: 18px;
      height: 75px;
      margin-bottom: 50px;
      width: 100px;
    }
    .legend-key {
      display: inline-block;
      border-radius: 20%;
      width: 10px;
      height: 10px;
      margin-right: 5px;
    
  </style>
  <style>
    .mapboxgl-ctrl-geocoder {
      font:15px 'Helvetica Neue', Arial, Helvetica, sans-serif;
      position:relative;
      top: 130px;
      right: 20px;
      background-color:rgba(255, 255, 255, 0.8);
      width:33.3333%;
      z-index:1;
      border-radius:70px;
    }
  </style>
</head>
  <body>
 
  <div id="map"></div>
  <div class="map-overlay" id="features"><h2>The Closed Greyhound Network</h2><div id="pd"><p>Click any city to highlight routes. You can use the search box to help find a city.</p></div></div>
<div class="map-overlay" id="legend"></div>
<div id="geocoder" class="geocoder"></div>
    <script>
      mapboxgl.accessToken =   'pk.eyJ1Ijoidmlra2lqaWFuZyIsImEiOiJjanNvNG5zM2owMHdxNDNxa2I3M2pwa3k2In0.rCiEcyTHOXRFEv4lBsJD-g';
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/vikkijiang/cju7j2lhy2zvv1fnooiz2lrsu',
        center: [-120.847040, 53.675527],
        zoom: 3.8
      });
      
      function flyToCity(currentFeature) {
        map.flyTo({
        center: currentFeature.geometry.coordinates,
        zoom: 5
        });
      }
 
      map.on('load', function() {
        // make a pointer cursor
        
        map.getCanvas().style.cursor = 'default';
        var layers = ['<1,000', '29,999', '99,999', '631,486'];
        var colors = ['#bc720b', '#f7b21d', '#fae180', '#fafaa3'];
        var routes = ['route-1','route-2','route-3','route-4','route-5','Route-6','route-7','route-8','route-9','route-10','route-11','route-12','route-13','route-14','route-15','route-16'] 
        // create legend
        for (i=0; i<layers.length; i++) {
          var layer = layers[i];
          var color = colors[i];
          var item = document.createElement('div');
          var key = document.createElement('span');
          key.className = 'legend-key';
          key.style.backgroundColor = color;
          var value = document.createElement('span');
          value.innerHTML = layer;
          item.appendChild(key);
          item.appendChild(value);
          legend.appendChild(item);
        }
        
        // Add an event listener for when a user clicks on the map
        map.on('click', function(e) {
        // Query all the rendered points in the view
          var features = map.queryRenderedFeatures(e.point, { layers: ['greyhound_stops'] });
            if (features.length > 0){
              if (typeof map.getLayer('selectedCity') !== "undefined" ){         
                map.removeLayer('selectedCity');
                map.removeSource('selectedCity');
              }
              var clickedPoint = features[0];
            // 1. Fly to the point
              flyToCity(clickedPoint);
            // 2. Change text to display population + name
              document.getElementById('pd').innerHTML = '<h3><strong>' + features[0].properties.Name + " has a population of " + features[0].properties.Population + ".";
            // 3. Highlight route + outline city
             map.addSource('selectedCity', {
              "type":"geojson",
              "data": features[0].toJSON()
              });
              map.addLayer({
                "id": "selectedCity",
                "type": "circle",
                "source": "selectedCity",
                "paint": {
                  "circle-stroke-width": 5,
                  "circle-opacity": 0,
                  "circle-radius": {
                    property: 'Population',
                    type: 'exponential', 
                    stops: [ 
                      [1000, 5],
                      [29999, 20],
                      [99999, 30],
                      [621490, 40],
                      ]
                    }
                }
      
              });
            //4. unhighlight all others
              var bbox = [[e.point.x - 10, e.point.y - 10], [e.point.x + 10, e.point.y + 10]];
              var selectedRoutes = map.queryRenderedFeatures(bbox, { layers: ['route-1','route-2','route-3','route-4','route-5','Route-6','route-7','route-8','route-9','route-10','route-11','route-12','route-13','route-14','route-15','route-16',] });
              var selectedRouteNames = []
              var x;
              y = selectedRoutes.length;
              for (x = 0; x < y; x++) {
                selectedRouteNames[x] = selectedRoutes[x].layer.id; 
              }
              var i;
              for (i = 0; i < 16; i++) {
                var currentRoute = routes[i]
                var contained = selectedRouteNames.includes(currentRoute);
                if (contained == false){
                  map.setPaintProperty(currentRoute, 'line-color', '#000000');
                }
              }
            
          }else{
            document.getElementById('pd').innerHTML = "<p>Click any city to highlight routes. You can use the search box to help find a city.</p>"
            if (typeof map.getLayer('selectedCity') !== "undefined" ){         
                map.removeLayer('selectedCity');
                map.removeSource('selectedCity');
              var i;
              for (i = 0; i < 16; i++) {
                var currentRoute = routes[i];
                map.setPaintProperty(currentRoute, 'line-color', '#42d1f4');
                }
              }
            } 
      });
      });
      var geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        placeholder: 'Search in BC',
        bbox: [-139.218750,48.283193,-113.554688,60.064840],
        // Can't seem to get this to work, trying to only have cities come up. types: [place],
      });

      // Add the geocoder to the map
      map.addControl(geocoder);
    </script>
  </body>
</html>
